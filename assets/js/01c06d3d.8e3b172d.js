"use strict";(self.webpackChunkrunlet_website=self.webpackChunkrunlet_website||[]).push([[80],{4137:function(e,t,a){a.d(t,{Zo:function(){return m},kt:function(){return d}});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),c=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},m=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,s=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),u=c(a),d=n,f=u["".concat(s,".").concat(d)]||u[d]||p[d]||l;return a?r.createElement(f,o(o({ref:t},m),{},{components:a})):r.createElement(f,o({ref:t},m))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,o=new Array(l);o[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:n,o[1]=i;for(var c=2;c<l;c++)o[c]=a[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},9380:function(e,t,a){a.r(t),a.d(t,{assets:function(){return m},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return p}});var r=a(7462),n=a(3366),l=(a(7294),a(4137)),o=["components"],i={id:"classes",title:"Classes Api",displayed_sidebar:"gameframework"},s=void 0,c={unversionedId:"gameframework/classes",id:"gameframework/classes",title:"Classes Api",description:"| \u540d\u79f0                                                         | \u63cf\u8ff0                                                         |",source:"@site/docs/gameframework/classes.md",sourceDirName:"gameframework",slug:"/gameframework/classes",permalink:"/docs/gameframework/classes",tags:[],version:"current",frontMatter:{id:"classes",title:"Classes Api",displayed_sidebar:"gameframework"},sidebar:"gameframework",next:{title:"Actor",permalink:"/docs/gameframework/classes/actor"}},m={},p=[],u={toc:p};function d(e){var t=e.components,a=(0,n.Z)(e,o);return(0,l.kt)("wrapper",(0,r.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"\u540d\u79f0"),(0,l.kt)("th",{parentName:"tr",align:null},"\u63cf\u8ff0"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/GameFramework/classes/actor"},"Actor")),(0,l.kt)("td",{parentName:"tr",align:null},"Actor is the base class for an Object that can be placed or spawned in a level.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/GameFramework/classes/camerablockingvolume"},"CameraBlockingVolume")),(0,l.kt)("td",{parentName:"tr",align:null},"A volume which blocks the Camera channel by default.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/GameFramework/classes/character"},"Character")),(0,l.kt)("td",{parentName:"tr",align:null},"Characters are Pawns that have a mesh, collision, and built-in movement logic.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/GameFramework/classes/controller"},"Controller")),(0,l.kt)("td",{parentName:"tr",align:null},"Controllers are non-physical actors that can possess a Pawn to control its actions.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"DefaultPawn"),(0,l.kt)("td",{parentName:"tr",align:null},"DefaultPawn implements a simple Pawn with spherical collision and built-in flying movement.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"DefaultPhysicsVolume"),(0,l.kt)("td",{parentName:"tr",align:null},"DefaultPhysicsVolume: the default physics volume for areas of the level with no physics volume specified DefaultPhysicsVolume determines the physical effects an actor will experience if they are not inside any user specified PhysicsVolume")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"GameMode"),(0,l.kt)("td",{parentName:"tr",align:null},"GameMode is a subclass of GameModeBase that behaves like a multiplayer match-based game.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"GameModeBase"),(0,l.kt)("td",{parentName:"tr",align:null},"The GameModeBase defines the game being played.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"GameNetworkManager"),(0,l.kt)("td",{parentName:"tr",align:null},"Handles game-specific networking management (cheat detection, bandwidth management, etc.).")))))}d.isMDXComponent=!0}}]);